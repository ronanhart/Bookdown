[["hr-viz.html", "Chapter 4 Home Range Visualization 4.1 LoCoH Home Ranges 4.2 Set Up 4.3 LoCoH Home Range for One Season 4.4 LoCoH Home Range for all seasons in all years", " Chapter 4 Home Range Visualization 4.1 LoCoH Home Ranges A home range is defined as the area an animal normally travels (Burt, 1943), or a spatially bounded pattern of an individuals space-use process. A home range is not necessarily the same inter- or intra-annually  this is especially true for migrants or partial-migrants. Because a home range is dependent on temporal scales, I will need to delineate home ranges of a specific season within a specifc year, as this home range is likely to change by the next season or year. To estimate home ranges, I need to generate a utilization distribution (UD)  the probability density distribution of animal occurrence in a two-dimensional space  which is bounded by a specific contour aka isopleth. 4.1.1 Research Questions How does an animals home range shape change with the presence of linear features (roads or fences)? How does an animals home range area change with barrier density? LoCoH  or Local Convex Hull  differs from other home range UDs in that it shows gaps and sharp boundaries of the animals movement. This is useful for my research because I can see if the home range shape is affected by linear features  such as if it runs parallel to a barrier. 4.1.2 Objectives My objective for this code is to delineate and plot the LoCoH home range for every season of every year for every individual. I also want to plot a boxplot of the estimated areas of that years home ranges. 4.2 Set Up For this task, Ill be using a lot of packages. Ill use dplyr to pipe and organize the dataframes, but since Ill also use ggplot2, I will just go ahead and use the whole tidyverse package. Ill also use lubridate to help deal with year formatting. To deal with simple features and spatial data, Ill use the packages sf and sp. To help make my plots look nice, Ill use the packages patchwork and viridis. And, finally, to deal with steps and home ranges, Ill use the package amt. install.packages(&quot;tidyverse&quot;) install.packages(&quot;lubridate&quot;) install.packages(&quot;amt&quot;) install.packages(&quot;sp&quot;) install.packages(&quot;sf&quot;) install.packages(&quot;patchwork&quot;) install.packages(&quot;viridis&quot;) library(tidyverse) library(lubridate) library(amt) library(sp) library(sf) library(patchwork) library(viridis) in_dir &lt;- &quot;Data/GPS/Processed/Individuals/&quot; out_dir &lt;- &quot;Analysis/Output/LoCoH/&quot; # Check if the output directory exists or not if (!dir.exists(out_dir)) { dir.create(out_dir, recursive = TRUE) } ani_fn &lt;- list.files(path = in_dir, full.names = TRUE)[1] iso_levels &lt;- seq(0.1, 1, by = 0.1) locoh_type &lt;- &quot;a&quot; Based on previous research on migratory or partially migratory pronghorn and mule deer in Utah, I can be reasonably certain of the times when these animals would be in their summer and winter ranges and when they would be in their spring and autumn migrations. Season Dates Summer July 1 - September 30 Winter January 1 - March 31 - - Spring April 1 - June 30 Autumn October 1 - December 31 winter &lt;- c(1, 2, 3) spring &lt;- c(4, 5, 6) summer &lt;- c(7, 8, 9) autumn &lt;- c(10, 11, 12) 4.3 LoCoH Home Range for One Season 4.3.1 Delineate Seasonal LoCoH Hull First I need to read in the rds data into a data frame. I only need the animal ID, the date and time stamp, and utm x and y positions. To be safe, Im also going to sort the datetime column. Then, for ease, Ill add a column of the year and the season of that position. animal_df &lt;- readRDS(ani_fn) %&gt;% dplyr::select(animal_id, datetime, utm_x, utm_y) %&gt;% as_tibble() %&gt;% # sort by earliest to latest datetime arrange(datetime) %&gt;% # make a column for year and season mutate( yr = year(datetime), ssn = case_when(month(datetime) %in% winter ~ &quot;Winter&quot;, month(datetime) %in% spring ~ &quot;Spring&quot;, month(datetime) %in% summer ~ &quot;Summer&quot;, month(datetime) %in% autumn ~ &quot;Autumn&quot;)) Lets see how many years this individual was tracked print(unique(animal_df$yr)) ## [1] 2013 2014 Lets just work with 2013 data for now, so lets filter the animal_df dataframe. ani_yr &lt;- animal_df %&gt;% filter(yr == 2013) Lets see how many seasons this individual was tracked in 2013 print(unique(ani_yr$ssn)) ## [1] &quot;Winter&quot; &quot;Spring&quot; &quot;Summer&quot; &quot;Autumn&quot; Lets just work with Winter data for now, so lets filter the ani_yr dataframe. ani_ssn &lt;- ani_yr %&gt;% filter(ssn == &quot;Winter&quot;) Now that I have a dataframe of just one season in one year for one individual, I can delineate this seasons LoCoH hull. Ill use the make_track function from the amt package to make a track of all the individuals steps of this season, and then the function hr_locoh to delineate the LoCoH hulls with the isopleth levels I specified earlier. # make the track track &lt;- ani_ssn %&gt;% make_track(utm_x, utm_y, datetime, animal_id, # EPSG:32612 = WGS 84 / UTM zone 12N crs = CRS(&quot;+init=epsg:32612&quot;)) # calculate the max distance between points for parameter &quot;n&quot; max_dist &lt;- track[, c(&quot;x_&quot;, &quot;y_&quot;)] %&gt;% dist() %&gt;% max() # delineate the locoh home range for the given season locoh_ssn &lt;- track %&gt;% hr_locoh(levels = iso_levels, keep.data = TRUE, n = max_dist, type = locoh_type, rand_buffer = 1e-05) 4.3.2 Plot Home Range Now that I have the LoCoH hull of this season, I can plot it and save the plot and data. plot(locoh_ssn) Lets try in ggplot. First I have to turn locoh_ssn into an sf object using the function hr_isopleths in amt. locoh_ssn %&gt;% hr_isopleths() %&gt;% ggplot() + geom_sf() But right now, the isopleth levels are from small to large, so the largest isopleth are stacked on top and I cant see the smaller ones. So first I have to re-arrange the levels. locoh_ssn %&gt;% hr_isopleths() %&gt;% arrange(desc(level)) %&gt;% ggplot() + geom_sf() Great! But I cant tell which isopleth is which locoh_ssn %&gt;% hr_isopleths() %&gt;% arrange(desc(level)) %&gt;% ggplot() + geom_sf(aes(fill = level)) The darker colors are of the smaller isopleths, showing the areas where the animal spent the majority of their time in this season. This plot is fine, but lets pretty it up a little. Im going to remove the outlines of the isopleths, change the theme, add labels for the axes, legend, and title, and change the color scheme to viridis. ani_name &lt;- unique(animal_df$animal_id) locoh_ssn %&gt;% hr_isopleths() %&gt;% arrange(desc(level)) %&gt;% ggplot() + geom_sf(aes(fill = level, color = level)) + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = paste(ani_name, &quot;LoCoH Winter 2013&quot;), fill = &quot;Isopleth&quot;, color = &quot;Isopleth&quot;) + scale_color_viridis_c(aesthetics = c(&quot;color&quot;, &quot;fill&quot;), option = &quot;inferno&quot;) I can also add the animals original position points locoh_ssn %&gt;% hr_isopleths() %&gt;% arrange(desc(level)) %&gt;% ggplot() + geom_sf(aes(fill = level, color = level)) + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = paste(ani_name, &quot;LoCoH Winter 2013&quot;), fill = &quot;Isopleth&quot;, color = &quot;Isopleth&quot;) + scale_color_viridis_c(aesthetics = c(&quot;color&quot;, &quot;fill&quot;), option = &quot;inferno&quot;) + geom_point(data = locoh_ssn$data, mapping = aes(x = x_, y = y_), alpha = 0.2) Looks great! Lets save this plot in an output figures folder. plot_fn &lt;- paste0(ani_name, &quot;2013_winter.tiff&quot;) ggsave(plot_fn, path = out_dir) 4.4 LoCoH Home Range for all seasons in all years However, its not very useful to copy and paste this code for every season of every year for this individual, and becomes even more tedious when I introduce this for more than one individual. In my real data, I have 3901 individuals, so it would make more sense to loop over all of these functions using lapply. Heres all of the functions I went through above but now in nested loops # load and format individual&#39;s data frame animal_df &lt;- readRDS(ani_fn) %&gt;% dplyr::select(animal_id, datetime, utm_x, utm_y) %&gt;% as_tibble() %&gt;% arrange(datetime) %&gt;% mutate( yr = year(datetime), ssn = case_when(month(datetime) %in% winter ~ &quot;Winter&quot;, month(datetime) %in% spring ~ &quot;Spring&quot;, month(datetime) %in% summer ~ &quot;Summer&quot;, month(datetime) %in% autumn ~ &quot;Autumn&quot;)) # make a vector for the unique years years &lt;- unique(animal_df$yr) # Loop through every year for this individual # (returns a list of locoh for all years with all seasons of those years) locoh &lt;- lapply(1:length(years), function(y){ # filter by year ani_yr &lt;- animal_df %&gt;% filter(yr == years[y]) # make a vector for the unique seasons of that year seasons &lt;- unique(ani_yr$ssn) # Loop through every seasons for that year # (returns a list of locoh for all the seasons of that year) locoh_yr &lt;- lapply(1:length(seasons), function(s){ # filter by season ani_ssn &lt;- ani_yr %&gt;% filter(ssn == seasons[s]) # delineate the locoh home range for the given season # make the track track &lt;- ani_ssn %&gt;% make_track(utm_x, utm_y, datetime, animal_id, # EPSG:32612 = WGS 84 / UTM zone 12N crs = CRS(&quot;+init=epsg:32612&quot;)) # calculate the max distance between points for parameter &quot;n&quot; max_dist &lt;- track[, c(&quot;x_&quot;, &quot;y_&quot;)] %&gt;% dist() %&gt;% max() locoh_ssn &lt;- track %&gt;% hr_locoh(levels = iso_levels, keep.data = TRUE, n = max_dist, type = locoh_type, rand_buffer = 1e-05) return(locoh_ssn) }) # name the elements of this list after the seaons of that year names(locoh_yr) &lt;- seasons return(locoh_yr) }) # name the elements of this list after the years for this individual names(locoh) &lt;- years Now, I have a large list of every LoCoH home range of this individual, named with its corresponding season and year. I can access this data by indexing, such as locoh[[1]][[3]] or using the names of each list, such as locoh$2013$\"Summer\". Or I can use lapply again to get all seasons of all years into one dataframe. years &lt;- names(locoh) hr_sf &lt;- lapply(1:length(locoh), function(y){ hr_yr &lt;- lapply(1:length(locoh[[y]]), function(s){ seasons &lt;- names(locoh[[y]]) hr &lt;- locoh[[y]][[s]] %&gt;% hr_isopleths() %&gt;% arrange(desc(level)) %&gt;% mutate( year = years[y], season = seasons[s]) return(hr) }) %&gt;% bind_rows() }) %&gt;% bind_rows() I can use this to plot all the seasonal LoCoH hulls of a single year together. winter_2013 &lt;- hr_sf %&gt;% filter(year == 2013 &amp; season == &quot;Winter&quot;) %&gt;% ggplot(aes(fill = level, color = level)) + geom_sf() + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;Winter 2013&quot;, fill = &quot;Isopleth&quot;, color = &quot;Isopleth&quot;) + scale_color_viridis_c(aesthetics = c(&quot;color&quot;, &quot;fill&quot;)) summer_2013 &lt;- hr_sf %&gt;% filter(year == 2013 &amp; season == &quot;Summer&quot;) %&gt;% ggplot(aes(fill = level, color = level)) + geom_sf() + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;Summer 2013&quot;, fill = &quot;Isopleth&quot;, color = &quot;Isopleth&quot;) + scale_color_viridis_c(aesthetics = c(&quot;color&quot;, &quot;fill&quot;), option = &quot;inferno&quot;) spring_2013 &lt;- hr_sf %&gt;% filter(year == 2013 &amp; season == &quot;Spring&quot;) %&gt;% ggplot(aes(fill = level, color = level)) + geom_sf() + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;Spring 2013&quot;, fill = &quot;Isopleth&quot;, color = &quot;Isopleth&quot;) + scale_color_viridis_c(aesthetics = c(&quot;color&quot;, &quot;fill&quot;), option = &quot;plasma&quot;) autumn_2013 &lt;- hr_sf %&gt;% filter(year == 2013 &amp; season == &quot;Autumn&quot;) %&gt;% ggplot(aes(fill = level, color = level)) + geom_sf() + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;Autumn 2013&quot;, fill = &quot;Isopleth&quot;, color = &quot;Isopleth&quot;) + scale_color_viridis_c(aesthetics = c(&quot;color&quot;, &quot;fill&quot;), option = &quot;magma&quot;) (winter_2013 | summer_2013) /(spring_2013 | autumn_2013) winter_plot &lt;- hr_sf %&gt;% filter(season == &quot;Winter&quot;) %&gt;% ggplot(aes(fill = level, color = year)) + geom_sf() + scale_fill_viridis_c() + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;MD13F0001 Winter LoCoH Hull&quot;, fill = &quot;Isopleth&quot;) summer_plot &lt;- hr_sf %&gt;% filter(season == &quot;Summer&quot;) %&gt;% ggplot(aes(fill = level, color = year)) + geom_sf() + scale_fill_viridis_c(option = &quot;plasma&quot;) + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;MD13F0001 Summer LoCoH Hull&quot;, fill = &quot;Isopleth&quot;) winter_plot | summer_plot season_2013 &lt;- hr_sf %&gt;% filter(year == 2013 &amp; season == c(&quot;Winter&quot;, &quot;Summer&quot;)) transition_2013 &lt;- hr_sf %&gt;% filter(year == 2013 &amp; season == c(&quot;Spring&quot;, &quot;Autumn&quot;)) season_2014 &lt;- hr_sf %&gt;% filter(year == 2014 &amp; season == c(&quot;Winter&quot;, &quot;Summer&quot;)) transition_2014 &lt;- hr_sf %&gt;% filter(year == 2014 &amp; season == c(&quot;Spring&quot;, &quot;Autumn&quot;)) p_2013 &lt;- ggplot() + geom_sf(data = transition_2013, mapping = aes(fill = season, color = season), alpha = 0.2) + geom_sf(data = season_2013, mapping = aes(fill = season, color = season)) + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;2013 Home Ranges&quot;, fill = &quot;&quot;, color = &quot;&quot;) p_2014 &lt;- ggplot() + geom_sf(data = transition_2014, mapping = aes(fill = season, color = season), alpha = 0.2) + geom_sf(data = season_2014, mapping = aes(fill = season, color = season)) + theme_minimal() + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;2014 Home Ranges&quot;, fill = &quot;&quot;, color = &quot;&quot;) p_2013 | p_2014 4.4.1 Home Range Area I can use a similar approach to make a data frame of areas of the home ranges using the function hr_area. hr_area &lt;- lapply(1:length(locoh), function(y){ hr_yr &lt;- lapply(1:length(locoh[[y]]), function(s){ seasons &lt;- names(locoh[[y]]) hr &lt;- locoh[[y]][[s]] %&gt;% hr_area() %&gt;% mutate( year = years[y], season = seasons[s]) return(hr) }) %&gt;% bind_rows() }) %&gt;% bind_rows() How does total home range area differ by year? hr_area %&gt;% filter(area &lt; quantile(hr_area$area, .8)) %&gt;% ggplot(aes(x = year, y = area)) + geom_boxplot(outlier.shape = NA) + geom_jitter(aes(color = season), alpha = 0.5) + labs(x = &quot;&quot;, y = &quot;Area (m^2)&quot;, color = &quot;&quot;, title = &quot;MD13F0001 Home Range Area by Year&quot;) + theme_minimal() How does total summer area compare with total winter area? hr_area %&gt;% filter(area &lt; quantile(hr_area$area, .8) &amp; season == c(&quot;Winter&quot;, &quot;Summer&quot;)) %&gt;% ggplot(aes(x = season, y = area)) + geom_boxplot(outlier.shape = NA) + geom_jitter(aes(color = year), alpha = 0.5) + labs(x = &quot;&quot;, y = &quot;Area (m^2)&quot;, color = &quot;&quot;, title = &quot;MD13F0001 Home Range Area by Seasons&quot;) + theme_minimal() How do the seasonal areas change by year? hr_area %&gt;% filter(area &lt; quantile(hr_area$area, .8)) %&gt;% ggplot(aes(x = factor(season, levels = c(&quot;Winter&quot;, &quot;Spring&quot;, &quot;Summer&quot;, &quot;Autumn&quot;)), y = area, color = year)) + geom_boxplot() + labs(x = &quot;&quot;, y = &quot;Area (m^2)&quot;, color = &quot;&quot;, title = &quot;MD13F0001 Home Range Area by Season&quot;) + theme_minimal() Burt, W.H. (1943). Territoriality and home range concepts as applied to mammals. J. Mammal., 24, 346. "]]
